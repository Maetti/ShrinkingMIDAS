// Generated by rstantools.  Do not edit by hand.

/*
    ShrinkingMidas is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ShrinkingMidas is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ShrinkingMidas.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_horseshoe_group_plus_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_horseshoe_group_plus");
    reader.add_event(87, 85, "end", "model_horseshoe_group_plus");
    return reader;
}
#include <stan_meta_header.hpp>
class model_horseshoe_group_plus
  : public stan::model::model_base_crtp<model_horseshoe_group_plus> {
private:
        int nY_train;
        int nY_test;
        int nZ;
        int nG;
        std::vector<double> y_train;
        std::vector<double> y_test;
        matrix_d x_train;
        matrix_d x_test;
        vector_d gSize;
        std::vector<int> gInd;
        vector_d pr_sigma;
public:
    model_horseshoe_group_plus(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_horseshoe_group_plus(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_horseshoe_group_plus_namespace::model_horseshoe_group_plus";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "nY_train", "int", context__.to_vec());
            nY_train = int(0);
            vals_i__ = context__.vals_i("nY_train");
            pos__ = 0;
            nY_train = vals_i__[pos__++];
            check_greater_or_equal(function__, "nY_train", nY_train, 0);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "nY_test", "int", context__.to_vec());
            nY_test = int(0);
            vals_i__ = context__.vals_i("nY_test");
            pos__ = 0;
            nY_test = vals_i__[pos__++];
            check_greater_or_equal(function__, "nY_test", nY_test, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "nZ", "int", context__.to_vec());
            nZ = int(0);
            vals_i__ = context__.vals_i("nZ");
            pos__ = 0;
            nZ = vals_i__[pos__++];
            check_greater_or_equal(function__, "nZ", nZ, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "nG", "int", context__.to_vec());
            nG = int(0);
            vals_i__ = context__.vals_i("nG");
            pos__ = 0;
            nG = vals_i__[pos__++];
            check_greater_or_equal(function__, "nG", nG, 0);
            current_statement_begin__ = 13;
            validate_non_negative_index("y_train", "nY_train", nY_train);
            context__.validate_dims("data initialization", "y_train", "double", context__.to_vec(nY_train));
            y_train = std::vector<double>(nY_train, double(0));
            vals_r__ = context__.vals_r("y_train");
            pos__ = 0;
            size_t y_train_k_0_max__ = nY_train;
            for (size_t k_0__ = 0; k_0__ < y_train_k_0_max__; ++k_0__) {
                y_train[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("y_test", "nY_test", nY_test);
            context__.validate_dims("data initialization", "y_test", "double", context__.to_vec(nY_test));
            y_test = std::vector<double>(nY_test, double(0));
            vals_r__ = context__.vals_r("y_test");
            pos__ = 0;
            size_t y_test_k_0_max__ = nY_test;
            for (size_t k_0__ = 0; k_0__ < y_test_k_0_max__; ++k_0__) {
                y_test[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("x_train", "nY_train", nY_train);
            validate_non_negative_index("x_train", "nZ", nZ);
            context__.validate_dims("data initialization", "x_train", "matrix_d", context__.to_vec(nY_train,nZ));
            x_train = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nY_train, nZ);
            vals_r__ = context__.vals_r("x_train");
            pos__ = 0;
            size_t x_train_j_2_max__ = nZ;
            size_t x_train_j_1_max__ = nY_train;
            for (size_t j_2__ = 0; j_2__ < x_train_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_train_j_1_max__; ++j_1__) {
                    x_train(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("x_test", "nY_test", nY_test);
            validate_non_negative_index("x_test", "nZ", nZ);
            context__.validate_dims("data initialization", "x_test", "matrix_d", context__.to_vec(nY_test,nZ));
            x_test = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nY_test, nZ);
            vals_r__ = context__.vals_r("x_test");
            pos__ = 0;
            size_t x_test_j_2_max__ = nZ;
            size_t x_test_j_1_max__ = nY_test;
            for (size_t j_2__ = 0; j_2__ < x_test_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_test_j_1_max__; ++j_1__) {
                    x_test(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("gSize", "nG", nG);
            context__.validate_dims("data initialization", "gSize", "vector_d", context__.to_vec(nG));
            gSize = Eigen::Matrix<double, Eigen::Dynamic, 1>(nG);
            vals_r__ = context__.vals_r("gSize");
            pos__ = 0;
            size_t gSize_j_1_max__ = nG;
            for (size_t j_1__ = 0; j_1__ < gSize_j_1_max__; ++j_1__) {
                gSize(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("gInd", "nZ", nZ);
            context__.validate_dims("data initialization", "gInd", "int", context__.to_vec(nZ));
            gInd = std::vector<int>(nZ, int(0));
            vals_i__ = context__.vals_i("gInd");
            pos__ = 0;
            size_t gInd_k_0_max__ = nZ;
            for (size_t k_0__ = 0; k_0__ < gInd_k_0_max__; ++k_0__) {
                gInd[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("pr_sigma", "2", 2);
            context__.validate_dims("data initialization", "pr_sigma", "vector_d", context__.to_vec(2));
            pr_sigma = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("pr_sigma");
            pos__ = 0;
            size_t pr_sigma_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < pr_sigma_j_1_max__; ++j_1__) {
                pr_sigma(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 24;
            validate_non_negative_index("theta", "nZ", nZ);
            num_params_r__ += nZ;
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            num_params_r__ += 1;
            current_statement_begin__ = 29;
            validate_non_negative_index("delta", "nG", nG);
            num_params_r__ += (1 * nG);
            current_statement_begin__ = 30;
            validate_non_negative_index("lambda", "nZ", nZ);
            num_params_r__ += (1 * nZ);
            current_statement_begin__ = 33;
            validate_non_negative_index("delta_prior", "nG", nG);
            num_params_r__ += (1 * nG);
            current_statement_begin__ = 34;
            validate_non_negative_index("lambda_prior", "nZ", nZ);
            num_params_r__ += (1 * nZ);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_horseshoe_group_plus() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 24;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "nZ", nZ);
        context__.validate_dims("parameter initialization", "theta", "vector_d", context__.to_vec(nZ));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta(nZ);
        size_t theta_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            theta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("sigma2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma2", "double", context__.to_vec());
        double sigma2(0);
        sigma2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("delta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "nG", nG);
        context__.validate_dims("parameter initialization", "delta", "double", context__.to_vec(nG));
        std::vector<double> delta(nG, double(0));
        size_t delta_k_0_max__ = nG;
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            delta[k_0__] = vals_r__[pos__++];
        }
        size_t delta_i_0_max__ = nG;
        for (size_t i_0__ = 0; i_0__ < delta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, delta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "nZ", nZ);
        context__.validate_dims("parameter initialization", "lambda", "double", context__.to_vec(nZ));
        std::vector<double> lambda(nZ, double(0));
        size_t lambda_k_0_max__ = nZ;
        for (size_t k_0__ = 0; k_0__ < lambda_k_0_max__; ++k_0__) {
            lambda[k_0__] = vals_r__[pos__++];
        }
        size_t lambda_i_0_max__ = nZ;
        for (size_t i_0__ = 0; i_0__ < lambda_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, lambda[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("delta_prior")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_prior missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_prior");
        pos__ = 0U;
        validate_non_negative_index("delta_prior", "nG", nG);
        context__.validate_dims("parameter initialization", "delta_prior", "double", context__.to_vec(nG));
        std::vector<double> delta_prior(nG, double(0));
        size_t delta_prior_k_0_max__ = nG;
        for (size_t k_0__ = 0; k_0__ < delta_prior_k_0_max__; ++k_0__) {
            delta_prior[k_0__] = vals_r__[pos__++];
        }
        size_t delta_prior_i_0_max__ = nG;
        for (size_t i_0__ = 0; i_0__ < delta_prior_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, delta_prior[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_prior: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("lambda_prior")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_prior missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_prior");
        pos__ = 0U;
        validate_non_negative_index("lambda_prior", "nZ", nZ);
        context__.validate_dims("parameter initialization", "lambda_prior", "double", context__.to_vec(nZ));
        std::vector<double> lambda_prior(nZ, double(0));
        size_t lambda_prior_k_0_max__ = nZ;
        for (size_t k_0__ = 0; k_0__ < lambda_prior_k_0_max__; ++k_0__) {
            lambda_prior[k_0__] = vals_r__[pos__++];
        }
        size_t lambda_prior_i_0_max__ = nZ;
        for (size_t i_0__ = 0; i_0__ < lambda_prior_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, lambda_prior[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_prior: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 24;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.vector_constrain(nZ, lp__);
            else
                theta = in__.vector_constrain(nZ);
            current_statement_begin__ = 25;
            local_scalar_t__ sigma2;
            (void) sigma2;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma2 = in__.scalar_lb_constrain(0, lp__);
            else
                sigma2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 28;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 29;
            std::vector<local_scalar_t__> delta;
            size_t delta_d_0_max__ = nG;
            delta.reserve(delta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    delta.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    delta.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 30;
            std::vector<local_scalar_t__> lambda;
            size_t lambda_d_0_max__ = nZ;
            lambda.reserve(lambda_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lambda_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lambda.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    lambda.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 33;
            std::vector<local_scalar_t__> delta_prior;
            size_t delta_prior_d_0_max__ = nG;
            delta_prior.reserve(delta_prior_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delta_prior_d_0_max__; ++d_0__) {
                if (jacobian__)
                    delta_prior.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    delta_prior.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 34;
            std::vector<local_scalar_t__> lambda_prior;
            size_t lambda_prior_d_0_max__ = nZ;
            lambda_prior.reserve(lambda_prior_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lambda_prior_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lambda_prior.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    lambda_prior.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 39;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("tr_Sigma", "nZ", nZ);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tr_Sigma(nZ);
            stan::math::initialize(tr_Sigma, DUMMY_VAR__);
            stan::math::fill(tr_Sigma, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 42;
            stan::math::assign(sigma, stan::math::sqrt(sigma2));
            current_statement_begin__ = 44;
            for (int i = 1; i <= nZ; ++i) {
                current_statement_begin__ = 45;
                stan::model::assign(tr_Sigma, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((sigma2 * get_base1(lambda, i, "lambda", 1)) * get_base1(delta, get_base1(gInd, i, "gInd", 1), "delta", 1)), 
                            "assigning variable tr_Sigma");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 39;
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 40;
            size_t tr_Sigma_j_1_max__ = nZ;
            for (size_t j_1__ = 0; j_1__ < tr_Sigma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(tr_Sigma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: tr_Sigma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tr_Sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 54;
            lp_accum__.add(inv_gamma_log<propto__>(sigma2, get_base1(pr_sigma, 1, "pr_sigma", 1), get_base1(pr_sigma, 2, "pr_sigma", 1)));
            current_statement_begin__ = 57;
            lp_accum__.add(cauchy_log<propto__>(tau, 0, 1));
            current_statement_begin__ = 60;
            lp_accum__.add(cauchy_log<propto__>(delta_prior, 0, 1));
            current_statement_begin__ = 61;
            lp_accum__.add(cauchy_log<propto__>(delta, 0, delta_prior));
            current_statement_begin__ = 64;
            lp_accum__.add(cauchy_log<propto__>(lambda_prior, 0, 1));
            current_statement_begin__ = 65;
            lp_accum__.add(cauchy_log<propto__>(lambda, 0, lambda_prior));
            current_statement_begin__ = 68;
            lp_accum__.add(normal_log<propto__>(theta, 0, tr_Sigma));
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log<propto__>(y_train, multiply(x_train, theta), sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta");
        names__.push_back("sigma2");
        names__.push_back("tau");
        names__.push_back("delta");
        names__.push_back("lambda");
        names__.push_back("delta_prior");
        names__.push_back("lambda_prior");
        names__.push_back("sigma");
        names__.push_back("tr_Sigma");
        names__.push_back("y_rep");
        names__.push_back("y_pred");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nG);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nG);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nY_train);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nY_test);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_horseshoe_group_plus_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta = in__.vector_constrain(nZ);
        size_t theta_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            vars__.push_back(theta(j_1__));
        }
        double sigma2 = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma2);
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        std::vector<double> delta;
        size_t delta_d_0_max__ = nG;
        delta.reserve(delta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delta_d_0_max__; ++d_0__) {
            delta.push_back(in__.scalar_lb_constrain(0));
        }
        size_t delta_k_0_max__ = nG;
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            vars__.push_back(delta[k_0__]);
        }
        std::vector<double> lambda;
        size_t lambda_d_0_max__ = nZ;
        lambda.reserve(lambda_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lambda_d_0_max__; ++d_0__) {
            lambda.push_back(in__.scalar_lb_constrain(0));
        }
        size_t lambda_k_0_max__ = nZ;
        for (size_t k_0__ = 0; k_0__ < lambda_k_0_max__; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
        }
        std::vector<double> delta_prior;
        size_t delta_prior_d_0_max__ = nG;
        delta_prior.reserve(delta_prior_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delta_prior_d_0_max__; ++d_0__) {
            delta_prior.push_back(in__.scalar_lb_constrain(0));
        }
        size_t delta_prior_k_0_max__ = nG;
        for (size_t k_0__ = 0; k_0__ < delta_prior_k_0_max__; ++k_0__) {
            vars__.push_back(delta_prior[k_0__]);
        }
        std::vector<double> lambda_prior;
        size_t lambda_prior_d_0_max__ = nZ;
        lambda_prior.reserve(lambda_prior_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lambda_prior_d_0_max__; ++d_0__) {
            lambda_prior.push_back(in__.scalar_lb_constrain(0));
        }
        size_t lambda_prior_k_0_max__ = nZ;
        for (size_t k_0__ = 0; k_0__ < lambda_prior_k_0_max__; ++k_0__) {
            vars__.push_back(lambda_prior[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 39;
            double sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("tr_Sigma", "nZ", nZ);
            Eigen::Matrix<double, Eigen::Dynamic, 1> tr_Sigma(nZ);
            stan::math::initialize(tr_Sigma, DUMMY_VAR__);
            stan::math::fill(tr_Sigma, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 42;
            stan::math::assign(sigma, stan::math::sqrt(sigma2));
            current_statement_begin__ = 44;
            for (int i = 1; i <= nZ; ++i) {
                current_statement_begin__ = 45;
                stan::model::assign(tr_Sigma, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((sigma2 * get_base1(lambda, i, "lambda", 1)) * get_base1(delta, get_base1(gInd, i, "gInd", 1), "delta", 1)), 
                            "assigning variable tr_Sigma");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 39;
            check_greater_or_equal(function__, "sigma", sigma, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(sigma);
                size_t tr_Sigma_j_1_max__ = nZ;
                for (size_t j_1__ = 0; j_1__ < tr_Sigma_j_1_max__; ++j_1__) {
                    vars__.push_back(tr_Sigma(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 79;
            validate_non_negative_index("y_rep", "nY_train", nY_train);
            std::vector<double> y_rep(nY_train, double(0));
            stan::math::initialize(y_rep, DUMMY_VAR__);
            stan::math::fill(y_rep, DUMMY_VAR__);
            stan::math::assign(y_rep,normal_rng(multiply(x_train, theta), sigma, base_rng__));
            current_statement_begin__ = 82;
            validate_non_negative_index("y_pred", "nY_test", nY_test);
            std::vector<double> y_pred(nY_test, double(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);
            stan::math::assign(y_pred,normal_rng(multiply(x_test, theta), sigma, base_rng__));
            current_statement_begin__ = 83;
            double log_lik;
            (void) log_lik;  // dummy to suppress unused var warning
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            stan::math::assign(log_lik,normal_log(y_test, multiply(x_test, theta), sigma));
            // validate, write generated quantities
            current_statement_begin__ = 79;
            size_t y_rep_k_0_max__ = nY_train;
            for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
                vars__.push_back(y_rep[k_0__]);
            }
            current_statement_begin__ = 82;
            size_t y_pred_k_0_max__ = nY_test;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                vars__.push_back(y_pred[k_0__]);
            }
            current_statement_begin__ = 83;
            vars__.push_back(log_lik);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_horseshoe_group_plus";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t theta_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t delta_k_0_max__ = nG;
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_k_0_max__ = nZ;
        for (size_t k_0__ = 0; k_0__ < lambda_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_prior_k_0_max__ = nG;
        for (size_t k_0__ = 0; k_0__ < delta_prior_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_prior" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_prior_k_0_max__ = nZ;
        for (size_t k_0__ = 0; k_0__ < lambda_prior_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_prior" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            size_t tr_Sigma_j_1_max__ = nZ;
            for (size_t j_1__ = 0; j_1__ < tr_Sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tr_Sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = nY_train;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_pred_k_0_max__ = nY_test;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t theta_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t delta_k_0_max__ = nG;
        for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_k_0_max__ = nZ;
        for (size_t k_0__ = 0; k_0__ < lambda_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_prior_k_0_max__ = nG;
        for (size_t k_0__ = 0; k_0__ < delta_prior_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_prior" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_prior_k_0_max__ = nZ;
        for (size_t k_0__ = 0; k_0__ < lambda_prior_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_prior" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            size_t tr_Sigma_j_1_max__ = nZ;
            for (size_t j_1__ = 0; j_1__ < tr_Sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tr_Sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = nY_train;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_pred_k_0_max__ = nY_test;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_horseshoe_group_plus_namespace::model_horseshoe_group_plus stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
